{"ast":null,"code":"function extractBody(code){let body={};// Regular expression to match key-value pairs, including triple-quoted and multi-line values\nlet regex=/\"([^\"]+)\"\\s*:\\s*(?:\"\"\"([\\s\\S]+?)\"\"\"|\"([^\"]*)\"|(\\d+|true|false|null))/gm;let match;while((match=regex.exec(code))!==null){let key=match[1];// Extract key\nlet value=match[2]||match[3]||match[4];// Extract the correct value\n// Convert numeric and boolean values properly\nif(!isNaN(value)&&value!==null){value=Number(value);}else if(value===\"true\"){value=true;}else if(value===\"false\"){value=false;}else if(value===\"null\"){value=null;}// Remove escape sequences for multi-line private keys or JWT tokens\nif(typeof value===\"string\"){value=value.replace(/\\\\n/g,\"\\n\").replace(/\\\\/g,\"\");// Convert JSON-style `\\n` to actual newlines\n}body[key]=value;}return body;}export default extractBody;","map":{"version":3,"names":["extractBody","code","body","regex","match","exec","key","value","isNaN","Number","replace"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify-api/src/functions/ExtractBody.js"],"sourcesContent":["function extractBody(code) {\n    let body = {};\n    \n    // Regular expression to match key-value pairs, including triple-quoted and multi-line values\n    let regex = /\"([^\"]+)\"\\s*:\\s*(?:\"\"\"([\\s\\S]+?)\"\"\"|\"([^\"]*)\"|(\\d+|true|false|null))/gm;\n    \n    let match;\n    while ((match = regex.exec(code)) !== null) {\n        let key = match[1]; // Extract key\n        let value = match[2] || match[3] || match[4]; // Extract the correct value\n        \n        // Convert numeric and boolean values properly\n        if (!isNaN(value) && value !== null) {\n            value = Number(value);\n        } else if (value === \"true\") {\n            value = true;\n        } else if (value === \"false\") {\n            value = false;\n        } else if (value === \"null\") {\n            value = null;\n        }\n\n        // Remove escape sequences for multi-line private keys or JWT tokens\n        if (typeof value === \"string\") {\n            value = value.replace(/\\\\n/g, \"\\n\").replace(/\\\\/g, \"\"); // Convert JSON-style `\\n` to actual newlines\n        }\n\n        body[key] = value;\n    }\n\n    return body;\n}\n\nexport default extractBody;"],"mappings":"AAAA,QAAS,CAAAA,WAAWA,CAACC,IAAI,CAAE,CACvB,GAAI,CAAAC,IAAI,CAAG,CAAC,CAAC,CAEb;AACA,GAAI,CAAAC,KAAK,CAAG,wEAAwE,CAEpF,GAAI,CAAAC,KAAK,CACT,MAAO,CAACA,KAAK,CAAGD,KAAK,CAACE,IAAI,CAACJ,IAAI,CAAC,IAAM,IAAI,CAAE,CACxC,GAAI,CAAAK,GAAG,CAAGF,KAAK,CAAC,CAAC,CAAC,CAAE;AACpB,GAAI,CAAAG,KAAK,CAAGH,KAAK,CAAC,CAAC,CAAC,EAAIA,KAAK,CAAC,CAAC,CAAC,EAAIA,KAAK,CAAC,CAAC,CAAC,CAAE;AAE9C;AACA,GAAI,CAACI,KAAK,CAACD,KAAK,CAAC,EAAIA,KAAK,GAAK,IAAI,CAAE,CACjCA,KAAK,CAAGE,MAAM,CAACF,KAAK,CAAC,CACzB,CAAC,IAAM,IAAIA,KAAK,GAAK,MAAM,CAAE,CACzBA,KAAK,CAAG,IAAI,CAChB,CAAC,IAAM,IAAIA,KAAK,GAAK,OAAO,CAAE,CAC1BA,KAAK,CAAG,KAAK,CACjB,CAAC,IAAM,IAAIA,KAAK,GAAK,MAAM,CAAE,CACzBA,KAAK,CAAG,IAAI,CAChB,CAEA;AACA,GAAI,MAAO,CAAAA,KAAK,GAAK,QAAQ,CAAE,CAC3BA,KAAK,CAAGA,KAAK,CAACG,OAAO,CAAC,MAAM,CAAE,IAAI,CAAC,CAACA,OAAO,CAAC,KAAK,CAAE,EAAE,CAAC,CAAE;AAC5D,CAEAR,IAAI,CAACI,GAAG,CAAC,CAAGC,KAAK,CACrB,CAEA,MAAO,CAAAL,IAAI,CACf,CAEA,cAAe,CAAAF,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}