{"ast":null,"code":"import { jwtDecode } from \"jwt-decode\";\nconst BASE_URL = \"https://inlmqkmxchdb5df6t3gjdqzpqi0jrfmc.lambda-url.eu-north-1.on.aws/\";\nasync function generateTestToken(existingToken) {\n  // Fetch user ID from local storage\n  let userId;\n  try {\n    var _JSON$parse;\n    userId = (_JSON$parse = JSON.parse(localStorage.getItem(\"creds\"))) === null || _JSON$parse === void 0 ? void 0 : _JSON$parse[\"user-id\"];\n    if (!userId) throw new Error(\"User ID missing\");\n  } catch (err) {\n    console.error(\"Login required:\", err);\n    alert(\"Please log in first. Redirecting to the login page.\");\n    window.location.href = \"/login\";\n    return {\n      error: \"login required\"\n    };\n  }\n\n  // Check if the existing token is expired\n  if (existingToken) {\n    try {\n      const decoded = jwtDecode(existingToken);\n      const expiryTime = decoded.exp * 1000; // Convert to milliseconds\n      const currentTime = Date.now();\n      if (currentTime < expiryTime) {\n        // Token is still valid, copy to clipboard\n        await navigator.clipboard.writeText(existingToken);\n        return {\n          error: null,\n          token: existingToken\n        };\n      } else {\n        console.log(\"Test token expired, regenerating...\");\n      }\n    } catch (error) {\n      console.error(\"Invalid token:\", error);\n    }\n  }\n\n  // Construct URL for generating a new test token\n  const url = `${BASE_URL}?req=test-token&auth=${encodeURIComponent(userId)}`;\n  try {\n    const response = await fetch(url);\n    if (!response.ok) throw new Error(\"Failed to fetch\");\n    const data = await response.json();\n    if (!data[\"test-token\"]) throw new Error(\"Invalid response\");\n\n    // Save new test token in local storage\n    localStorage.setItem(\"t_data\", JSON.stringify({\n      ...JSON.parse(localStorage.getItem(\"t_data\") || \"{}\"),\n      \"test-token\": data[\"test-token\"]\n    }));\n    return {\n      error: null,\n      token: data[\"test-token\"]\n    };\n  } catch (error) {\n    console.error(\"Error fetching test token:\", error);\n    return {\n      error: \"Failed to fetch test token\"\n    };\n  }\n}\nexport default generateTestToken;","map":{"version":3,"names":["jwtDecode","BASE_URL","generateTestToken","existingToken","userId","_JSON$parse","JSON","parse","localStorage","getItem","Error","err","console","error","alert","window","location","href","decoded","expiryTime","exp","currentTime","Date","now","navigator","clipboard","writeText","token","log","url","encodeURIComponent","response","fetch","ok","data","json","setItem","stringify"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify-api/src/functions/generateTestToken.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\nconst BASE_URL = \"https://inlmqkmxchdb5df6t3gjdqzpqi0jrfmc.lambda-url.eu-north-1.on.aws/\";\n\nasync function generateTestToken(existingToken) {\n    // Fetch user ID from local storage\n    let userId;\n    try {\n        userId = JSON.parse(localStorage.getItem(\"creds\"))?.[\"user-id\"];\n        if (!userId) throw new Error(\"User ID missing\");\n    } catch (err) {\n        console.error(\"Login required:\", err);\n        alert(\"Please log in first. Redirecting to the login page.\");\n        window.location.href = \"/login\";\n        return { error: \"login required\" };\n    }\n\n    // Check if the existing token is expired\n    if (existingToken) {\n        try {\n            const decoded = jwtDecode(existingToken);\n            const expiryTime = decoded.exp * 1000; // Convert to milliseconds\n            const currentTime = Date.now();\n\n            if (currentTime < expiryTime) {\n                // Token is still valid, copy to clipboard\n                await navigator.clipboard.writeText(existingToken);\n                return { error: null, token: existingToken };\n            } else {\n                console.log(\"Test token expired, regenerating...\");\n            }\n        } catch (error) {\n            console.error(\"Invalid token:\", error);\n        }\n    }\n\n    // Construct URL for generating a new test token\n    const url = `${BASE_URL}?req=test-token&auth=${encodeURIComponent(userId)}`;\n\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(\"Failed to fetch\");\n\n        const data = await response.json();\n        if (!data[\"test-token\"]) throw new Error(\"Invalid response\");\n\n        // Save new test token in local storage\n        localStorage.setItem(\"t_data\", JSON.stringify({\n            ...JSON.parse(localStorage.getItem(\"t_data\") || \"{}\"),\n            \"test-token\": data[\"test-token\"]\n        }));\n\n        return { error: null, token: data[\"test-token\"] };\n    } catch (error) {\n        console.error(\"Error fetching test token:\", error);\n        return { error: \"Failed to fetch test token\" };\n    }\n}\n\nexport default generateTestToken;"],"mappings":"AAAA,SAASA,SAAS,QAAQ,YAAY;AACtC,MAAMC,QAAQ,GAAG,wEAAwE;AAEzF,eAAeC,iBAAiBA,CAACC,aAAa,EAAE;EAC5C;EACA,IAAIC,MAAM;EACV,IAAI;IAAA,IAAAC,WAAA;IACAD,MAAM,IAAAC,WAAA,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,cAAAJ,WAAA,uBAAzCA,WAAA,CAA4C,SAAS,CAAC;IAC/D,IAAI,CAACD,MAAM,EAAE,MAAM,IAAIM,KAAK,CAAC,iBAAiB,CAAC;EACnD,CAAC,CAAC,OAAOC,GAAG,EAAE;IACVC,OAAO,CAACC,KAAK,CAAC,iBAAiB,EAAEF,GAAG,CAAC;IACrCG,KAAK,CAAC,qDAAqD,CAAC;IAC5DC,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAG,QAAQ;IAC/B,OAAO;MAAEJ,KAAK,EAAE;IAAiB,CAAC;EACtC;;EAEA;EACA,IAAIV,aAAa,EAAE;IACf,IAAI;MACA,MAAMe,OAAO,GAAGlB,SAAS,CAACG,aAAa,CAAC;MACxC,MAAMgB,UAAU,GAAGD,OAAO,CAACE,GAAG,GAAG,IAAI,CAAC,CAAC;MACvC,MAAMC,WAAW,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC;MAE9B,IAAIF,WAAW,GAAGF,UAAU,EAAE;QAC1B;QACA,MAAMK,SAAS,CAACC,SAAS,CAACC,SAAS,CAACvB,aAAa,CAAC;QAClD,OAAO;UAAEU,KAAK,EAAE,IAAI;UAAEc,KAAK,EAAExB;QAAc,CAAC;MAChD,CAAC,MAAM;QACHS,OAAO,CAACgB,GAAG,CAAC,qCAAqC,CAAC;MACtD;IACJ,CAAC,CAAC,OAAOf,KAAK,EAAE;MACZD,OAAO,CAACC,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;IAC1C;EACJ;;EAEA;EACA,MAAMgB,GAAG,GAAG,GAAG5B,QAAQ,wBAAwB6B,kBAAkB,CAAC1B,MAAM,CAAC,EAAE;EAE3E,IAAI;IACA,MAAM2B,QAAQ,GAAG,MAAMC,KAAK,CAACH,GAAG,CAAC;IACjC,IAAI,CAACE,QAAQ,CAACE,EAAE,EAAE,MAAM,IAAIvB,KAAK,CAAC,iBAAiB,CAAC;IAEpD,MAAMwB,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;IAClC,IAAI,CAACD,IAAI,CAAC,YAAY,CAAC,EAAE,MAAM,IAAIxB,KAAK,CAAC,kBAAkB,CAAC;;IAE5D;IACAF,YAAY,CAAC4B,OAAO,CAAC,QAAQ,EAAE9B,IAAI,CAAC+B,SAAS,CAAC;MAC1C,GAAG/B,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC;MACrD,YAAY,EAAEyB,IAAI,CAAC,YAAY;IACnC,CAAC,CAAC,CAAC;IAEH,OAAO;MAAErB,KAAK,EAAE,IAAI;MAAEc,KAAK,EAAEO,IAAI,CAAC,YAAY;IAAE,CAAC;EACrD,CAAC,CAAC,OAAOrB,KAAK,EAAE;IACZD,OAAO,CAACC,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IAClD,OAAO;MAAEA,KAAK,EAAE;IAA6B,CAAC;EAClD;AACJ;AAEA,eAAeX,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}