{"ast":null,"code":"import{jwtDecode}from\"jwt-decode\";const BASE_URL=\"https://inlmqkmxchdb5df6t3gjdqzpqi0jrfmc.lambda-url.eu-north-1.on.aws/\";async function generateTestToken(existingToken){// Fetch user ID from local storage\nlet userId;try{var _JSON$parse;userId=(_JSON$parse=JSON.parse(localStorage.getItem(\"creds\")))===null||_JSON$parse===void 0?void 0:_JSON$parse[\"user-id\"];if(!userId)throw new Error(\"User ID missing\");}catch(err){console.error(\"Login required:\",err);alert(\"Please log in first. Redirecting to the login page.\");window.location.href=\"/login\";return{error:\"login required\"};}// Check if the existing token is expired\nif(existingToken){try{const decoded=jwtDecode(existingToken);const expiryTime=decoded.exp*1000;// Convert to milliseconds\nconst currentTime=Date.now();if(currentTime<expiryTime){// Token is still valid, copy to clipboard\nawait navigator.clipboard.writeText(existingToken);return{error:null,token:existingToken};}else{console.log(\"Test token expired, regenerating...\");}}catch(error){console.error(\"Invalid token:\",error);}}// Construct URL for generating a new test token\nconst url=`${BASE_URL}?req=test-token&auth=${encodeURIComponent(userId)}`;try{const response=await fetch(url);if(!response.ok)throw new Error(\"Failed to fetch\");const data=await response.json();if(!data[\"test-token\"])throw new Error(\"Invalid response\");// Save new test token in local storage\nlocalStorage.setItem(\"t_data\",JSON.stringify({...JSON.parse(localStorage.getItem(\"t_data\")||\"{}\"),\"test-token\":data[\"test-token\"]}));return{error:null,token:data[\"test-token\"]};}catch(error){console.error(\"Error fetching test token:\",error);return{error:\"Failed to fetch test token\"};}}export default generateTestToken;","map":{"version":3,"names":["jwtDecode","BASE_URL","generateTestToken","existingToken","userId","_JSON$parse","JSON","parse","localStorage","getItem","Error","err","console","error","alert","window","location","href","decoded","expiryTime","exp","currentTime","Date","now","navigator","clipboard","writeText","token","log","url","encodeURIComponent","response","fetch","ok","data","json","setItem","stringify"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify-api/src/functions/generateTestToken.js"],"sourcesContent":["import { jwtDecode } from \"jwt-decode\";\nconst BASE_URL = \"https://inlmqkmxchdb5df6t3gjdqzpqi0jrfmc.lambda-url.eu-north-1.on.aws/\";\n\nasync function generateTestToken(existingToken) {\n    // Fetch user ID from local storage\n    let userId;\n    try {\n        userId = JSON.parse(localStorage.getItem(\"creds\"))?.[\"user-id\"];\n        if (!userId) throw new Error(\"User ID missing\");\n    } catch (err) {\n        console.error(\"Login required:\", err);\n        alert(\"Please log in first. Redirecting to the login page.\");\n        window.location.href = \"/login\";\n        return { error: \"login required\" };\n    }\n\n    // Check if the existing token is expired\n    if (existingToken) {\n        try {\n            const decoded = jwtDecode(existingToken);\n            const expiryTime = decoded.exp * 1000; // Convert to milliseconds\n            const currentTime = Date.now();\n\n            if (currentTime < expiryTime) {\n                // Token is still valid, copy to clipboard\n                await navigator.clipboard.writeText(existingToken);\n                return { error: null, token: existingToken };\n            } else {\n                console.log(\"Test token expired, regenerating...\");\n            }\n        } catch (error) {\n            console.error(\"Invalid token:\", error);\n        }\n    }\n\n    // Construct URL for generating a new test token\n    const url = `${BASE_URL}?req=test-token&auth=${encodeURIComponent(userId)}`;\n\n    try {\n        const response = await fetch(url);\n        if (!response.ok) throw new Error(\"Failed to fetch\");\n\n        const data = await response.json();\n        if (!data[\"test-token\"]) throw new Error(\"Invalid response\");\n\n        // Save new test token in local storage\n        localStorage.setItem(\"t_data\", JSON.stringify({\n            ...JSON.parse(localStorage.getItem(\"t_data\") || \"{}\"),\n            \"test-token\": data[\"test-token\"]\n        }));\n\n        return { error: null, token: data[\"test-token\"] };\n    } catch (error) {\n        console.error(\"Error fetching test token:\", error);\n        return { error: \"Failed to fetch test token\" };\n    }\n}\n\nexport default generateTestToken;"],"mappings":"AAAA,OAASA,SAAS,KAAQ,YAAY,CACtC,KAAM,CAAAC,QAAQ,CAAG,wEAAwE,CAEzF,cAAe,CAAAC,iBAAiBA,CAACC,aAAa,CAAE,CAC5C;AACA,GAAI,CAAAC,MAAM,CACV,GAAI,KAAAC,WAAA,CACAD,MAAM,EAAAC,WAAA,CAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC,UAAAJ,WAAA,iBAAzCA,WAAA,CAA4C,SAAS,CAAC,CAC/D,GAAI,CAACD,MAAM,CAAE,KAAM,IAAI,CAAAM,KAAK,CAAC,iBAAiB,CAAC,CACnD,CAAE,MAAOC,GAAG,CAAE,CACVC,OAAO,CAACC,KAAK,CAAC,iBAAiB,CAAEF,GAAG,CAAC,CACrCG,KAAK,CAAC,qDAAqD,CAAC,CAC5DC,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAG,QAAQ,CAC/B,MAAO,CAAEJ,KAAK,CAAE,gBAAiB,CAAC,CACtC,CAEA;AACA,GAAIV,aAAa,CAAE,CACf,GAAI,CACA,KAAM,CAAAe,OAAO,CAAGlB,SAAS,CAACG,aAAa,CAAC,CACxC,KAAM,CAAAgB,UAAU,CAAGD,OAAO,CAACE,GAAG,CAAG,IAAI,CAAE;AACvC,KAAM,CAAAC,WAAW,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAE9B,GAAIF,WAAW,CAAGF,UAAU,CAAE,CAC1B;AACA,KAAM,CAAAK,SAAS,CAACC,SAAS,CAACC,SAAS,CAACvB,aAAa,CAAC,CAClD,MAAO,CAAEU,KAAK,CAAE,IAAI,CAAEc,KAAK,CAAExB,aAAc,CAAC,CAChD,CAAC,IAAM,CACHS,OAAO,CAACgB,GAAG,CAAC,qCAAqC,CAAC,CACtD,CACJ,CAAE,MAAOf,KAAK,CAAE,CACZD,OAAO,CAACC,KAAK,CAAC,gBAAgB,CAAEA,KAAK,CAAC,CAC1C,CACJ,CAEA;AACA,KAAM,CAAAgB,GAAG,CAAG,GAAG5B,QAAQ,wBAAwB6B,kBAAkB,CAAC1B,MAAM,CAAC,EAAE,CAE3E,GAAI,CACA,KAAM,CAAA2B,QAAQ,CAAG,KAAM,CAAAC,KAAK,CAACH,GAAG,CAAC,CACjC,GAAI,CAACE,QAAQ,CAACE,EAAE,CAAE,KAAM,IAAI,CAAAvB,KAAK,CAAC,iBAAiB,CAAC,CAEpD,KAAM,CAAAwB,IAAI,CAAG,KAAM,CAAAH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAClC,GAAI,CAACD,IAAI,CAAC,YAAY,CAAC,CAAE,KAAM,IAAI,CAAAxB,KAAK,CAAC,kBAAkB,CAAC,CAE5D;AACAF,YAAY,CAAC4B,OAAO,CAAC,QAAQ,CAAE9B,IAAI,CAAC+B,SAAS,CAAC,CAC1C,GAAG/B,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,QAAQ,CAAC,EAAI,IAAI,CAAC,CACrD,YAAY,CAAEyB,IAAI,CAAC,YAAY,CACnC,CAAC,CAAC,CAAC,CAEH,MAAO,CAAErB,KAAK,CAAE,IAAI,CAAEc,KAAK,CAAEO,IAAI,CAAC,YAAY,CAAE,CAAC,CACrD,CAAE,MAAOrB,KAAK,CAAE,CACZD,OAAO,CAACC,KAAK,CAAC,4BAA4B,CAAEA,KAAK,CAAC,CAClD,MAAO,CAAEA,KAAK,CAAE,4BAA6B,CAAC,CAClD,CACJ,CAEA,cAAe,CAAAX,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}