{"ast":null,"code":"var _jsxFileName = \"/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/components/TestApi.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport CodeBlock from \"../components/CodeBlock\";\nimport RegisterDevice from \"../components/RegisterDevice\";\nimport extractBody from \"../functions/ExtractBody\";\nimport generateTestToken from \"../functions/generateTestToken\";\nimport \"../styles/TestApi.scss\";\nimport secret from \"../files/default_secret_key.json\";\nimport codeExamples from \"../files/code_examples\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst languages = [\"Python\", \"JavaScript\", \"Node.js\", \"C++\", \"Java\"];\nconst TestAPI = () => {\n  _s();\n  const [selectedLanguage, setSelectedLanguage] = useState(\"Python\");\n  const [updatedCode, setUpdatedCode] = useState({});\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState({});\n  const [deviceToken, setDeviceToken] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [runBtnText, setRunBtnText] = useState(\"Save Token\");\n  const copyToken = token => {\n    setDeviceToken(token);\n    setRunBtnText(\"Paste Device Token\");\n  };\n  const codeRefs = useRef({});\n  const run = async (event, step) => {\n    let latestCode = codeRefs.current[step][selectedLanguage].innerText;\n    const btnText = event.target.innerText;\n    if (btnText === \"Paste Device Token\") {\n      latestCode = latestCode.replace(/\"device-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-token\": \"${deviceToken}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n      setRunBtnText(\"Save Token\");\n      return;\n    }\n    if (btnText === \"Copy Device Id\") {\n      var _responses$step, _responses$step$selec, _responses$step$selec2;\n      const extractedDeviceId = (_responses$step = responses[step]) === null || _responses$step === void 0 ? void 0 : (_responses$step$selec = _responses$step[selectedLanguage]) === null || _responses$step$selec === void 0 ? void 0 : (_responses$step$selec2 = _responses$step$selec.match(/\"device_id\\s*\"\\s*:\\s*\"(.*?)\"/)) === null || _responses$step$selec2 === void 0 ? void 0 : _responses$step$selec2[1];\n      if (extractedDeviceId) {\n        await navigator.clipboard.writeText(extractedDeviceId);\n        setDeviceId(extractedDeviceId);\n      }\n      return;\n    }\n    if (btnText === \"Paste Device Id\") {\n      const clipboardText = await navigator.clipboard.readText();\n      latestCode = latestCode.replace(/\"device-id\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-id\": \"${clipboardText}\"`);\n      setUpdatedCode(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: latestCode\n        }\n      }));\n      event.target.innerText = \"Send Notification\";\n      return;\n    }\n    try {\n      setLoading(prev => ({\n        ...prev,\n        [step]: true\n      }));\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: `${btnText.split(\" \")[0].replace(/e$/, \"\")}ing...`\n        }\n      }));\n      let t_data = localStorage.getItem(\"t_data\");\n      let testToken = JSON.parse(t_data || \"{}\")[\"test-token\"];\n      if (!testToken) {\n        const res = await generateTestToken(testToken);\n        testToken = res.token;\n        if (!testToken) return;\n      }\n      if (!latestCode.includes(testToken)) {\n        latestCode = latestCode.replace(/\"access-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"access-token\": \"${testToken}\"`);\n        setUpdatedCode(prev => ({\n          ...prev,\n          [step]: {\n            [selectedLanguage]: latestCode\n          }\n        }));\n      }\n      const body = extractBody(latestCode);\n      body[\"access-token\"] = testToken;\n      if (body[\"client-email\"] === \"your-service-account-client-email\") {\n        const userData = JSON.parse(localStorage.getItem(\"creds\") || \"{}\");\n        const clientEmail = userData.email || \"your-email@gmail.com\";\n        body[\"client-email\"] = clientEmail;\n        latestCode = latestCode.replace(/\"client-email\\s*\"\\s*:\\s*\"(.*?)\"/, `\"client-email\": \"${clientEmail}\"`);\n        setUpdatedCode(prev => ({\n          ...prev,\n          [step]: {\n            [selectedLanguage]: latestCode\n          }\n        }));\n      }\n      if (body[\"private-key\"] === \"your-service-account-private-key\") {\n        body[\"private-key\"] = secret[\"secret-key\"];\n      }\n      const response = await fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(body)\n      });\n      const data = await response.json();\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: JSON.stringify(data, null, 2)\n        }\n      }));\n      setRunBtnText(\"Copy Device Id\");\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setResponses(prev => ({\n        ...prev,\n        [step]: {\n          [selectedLanguage]: \"Error fetching response\"\n        }\n      }));\n    } finally {\n      setLoading(prev => ({\n        ...prev,\n        [step]: false\n      }));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"test-api\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\uD83D\\uDEE0\\uFE0F Test PushNotify API\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"language-tabs\",\n      children: languages.map(lang => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `lang-tab ${selectedLanguage === lang ? \"active\" : \"\"}`,\n        onClick: () => setSelectedLanguage(lang),\n        children: lang\n      }, lang, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 7\n    }, this), [\"Generate JWT\", \"Save Token\", \"Send Push Notification\"].map((step, index) => {\n      var _updatedCode$step, _responses$step2;\n      return /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex fdc api-step\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: [index + 1, \"\\uFE0F\\u20E3 \", step]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(CodeBlock, {\n            ref: el => {\n              if (!codeRefs.current[step]) codeRefs.current[step] = {};\n              codeRefs.current[step][selectedLanguage] = el;\n            },\n            className: \"code-editor\",\n            step: step,\n            language: selectedLanguage,\n            code: ((_updatedCode$step = updatedCode[step]) === null || _updatedCode$step === void 0 ? void 0 : _updatedCode$step[selectedLanguage]) || codeExamples[step][selectedLanguage],\n            onCodeChange: newCode => setUpdatedCode(prev => ({\n              ...prev,\n              [step]: {\n                [selectedLanguage]: newCode\n              }\n            }))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 13\n          }, this), ((_responses$step2 = responses[step]) === null || _responses$step2 === void 0 ? void 0 : _responses$step2[selectedLanguage]) && /*#__PURE__*/_jsxDEV(CodeBlock, {\n            mode: \"minimal\",\n            className: \"minimal\",\n            step: step,\n            language: selectedLanguage,\n            code: responses[step][selectedLanguage] || \"no response\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: event => run(event, step),\n            className: \"api-btn\",\n            disabled: loading[step],\n            children: loading[step] ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"spinner\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 19\n              }, this), \" \", step.split(\" \")[0].replace(/e$/, \"\") + \"ing...\"]\n            }, void 0, true) : step === \"Save Token\" ? runBtnText : step === \"Send Push Notification\" ? deviceId ? \"Paste Device Id\" : \"Send Push Notification\" : step\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), step === \"Generate JWT\" && /*#__PURE__*/_jsxDEV(RegisterDevice, {\n          onToken: copyToken\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 39\n        }, this)]\n      }, step, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 115,\n    columnNumber: 5\n  }, this);\n};\n_s(TestAPI, \"b8LOtT1HI3X3a3w95jJLbQxjQVw=\");\n_c = TestAPI;\nexport default TestAPI;\nvar _c;\n$RefreshReg$(_c, \"TestAPI\");","map":{"version":3,"names":["React","useState","useRef","CodeBlock","RegisterDevice","extractBody","generateTestToken","secret","codeExamples","jsxDEV","_jsxDEV","Fragment","_Fragment","languages","TestAPI","_s","selectedLanguage","setSelectedLanguage","updatedCode","setUpdatedCode","responses","setResponses","loading","setLoading","deviceToken","setDeviceToken","deviceId","setDeviceId","runBtnText","setRunBtnText","copyToken","token","codeRefs","run","event","step","latestCode","current","innerText","btnText","target","replace","prev","_responses$step","_responses$step$selec","_responses$step$selec2","extractedDeviceId","match","navigator","clipboard","writeText","clipboardText","readText","split","t_data","localStorage","getItem","testToken","JSON","parse","res","includes","body","userData","clientEmail","email","response","fetch","method","headers","stringify","data","json","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","lang","onClick","index","_updatedCode$step","_responses$step2","ref","el","language","code","onCodeChange","newCode","mode","disabled","onToken","_c","$RefreshReg$"],"sources":["/data/data/com.termux/files/home/jWTFcm/clients/pushnotify.api/src/components/TestApi.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport CodeBlock from \"../components/CodeBlock\";\nimport RegisterDevice from \"../components/RegisterDevice\";\nimport extractBody from \"../functions/ExtractBody\";\nimport generateTestToken from \"../functions/generateTestToken\";\nimport \"../styles/TestApi.scss\";\nimport secret from \"../files/default_secret_key.json\";\nimport codeExamples from \"../files/code_examples\";\n\nconst languages = [\"Python\", \"JavaScript\", \"Node.js\", \"C++\", \"Java\"];\n\nconst TestAPI = () => {\n  const [selectedLanguage, setSelectedLanguage] = useState(\"Python\");\n  const [updatedCode, setUpdatedCode] = useState({});\n  const [responses, setResponses] = useState({});\n  const [loading, setLoading] = useState({});\n  const [deviceToken, setDeviceToken] = useState(null);\n  const [deviceId, setDeviceId] = useState(null);\n  const [runBtnText, setRunBtnText] = useState(\"Save Token\");\n        \n  const copyToken = (token) => {\n    setDeviceToken(token);\n    setRunBtnText(\"Paste Device Token\");\n  };\n\n  const codeRefs = useRef({});    \n\n  const run = async (event, step) => {\n      let latestCode = codeRefs.current[step][selectedLanguage].innerText;\n                              \n    const btnText = event.target.innerText;\n\n    if (btnText === \"Paste Device Token\") {\n      latestCode = latestCode.replace(/\"device-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-token\": \"${deviceToken}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      setRunBtnText(\"Save Token\");\n      return;\n    }\n\n    if (btnText === \"Copy Device Id\") {\n      const extractedDeviceId = responses[step]?.[selectedLanguage]?.match(/\"device_id\\s*\"\\s*:\\s*\"(.*?)\"/)?.[1];\n      if (extractedDeviceId) {\n        await navigator.clipboard.writeText(extractedDeviceId);\n        setDeviceId(extractedDeviceId);\n      }\n      return;\n    }\n\n    if (btnText === \"Paste Device Id\") {\n      const clipboardText = await navigator.clipboard.readText();\n      latestCode = latestCode.replace(/\"device-id\\s*\"\\s*:\\s*\"(.*?)\"/, `\"device-id\": \"${clipboardText}\"`);\n      setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      event.target.innerText = \"Send Notification\";\n      return;\n    }\n\n    try {\n      setLoading((prev) => ({ ...prev, [step]: true }));\n      setResponses((prev) => ({\n        ...prev,\n        [step]: { [selectedLanguage]: `${btnText.split(\" \")[0].replace(/e$/, \"\")}ing...` },\n      }));\n\n      let t_data = localStorage.getItem(\"t_data\");\n      let testToken = JSON.parse(t_data || \"{}\")[\"test-token\"];\n\n      if (!testToken) {\n        const res = await generateTestToken(testToken);\n        testToken = res.token;\n        if (!testToken) return;\n      }\n\n      if (!latestCode.includes(testToken)) {\n        latestCode = latestCode.replace(/\"access-token\\s*\"\\s*:\\s*\"(.*?)\"/, `\"access-token\": \"${testToken}\"`);\n        setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      }\n\n      const body = extractBody(latestCode);\n      body[\"access-token\"] = testToken;\n\n      if (body[\"client-email\"] === \"your-service-account-client-email\") {\n        const userData = JSON.parse(localStorage.getItem(\"creds\") || \"{}\");\n        const clientEmail = userData.email || \"your-email@gmail.com\";\n        body[\"client-email\"] = clientEmail;\n\n        latestCode = latestCode.replace(/\"client-email\\s*\"\\s*:\\s*\"(.*?)\"/, `\"client-email\": \"${clientEmail}\"`);\n        setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: latestCode } }));\n      }\n\n      if (body[\"private-key\"] === \"your-service-account-private-key\") {\n        body[\"private-key\"] = secret[\"secret-key\"];\n      }            \n            \n      const response = await fetch(\n        \"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\",\n        {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(body),\n        }\n      );\n\n      const data = await response.json();\n      setResponses((prev) => ({ ...prev, [step]: { [selectedLanguage]: JSON.stringify(data, null, 2) } }));\n      setRunBtnText(\"Copy Device Id\");\n    } catch (error) {\n      console.error(\"Error calling API:\", error);\n      setResponses((prev) => ({ ...prev, [step]: { [selectedLanguage]: \"Error fetching response\" } }));\n    } finally {\n      setLoading((prev) => ({ ...prev, [step]: false }));\n    }\n  };\n\n  return (\n    <section className=\"test-api\">\n      <h2>🛠️ Test PushNotify API</h2>\n\n      <div className=\"language-tabs\">\n        {languages.map((lang) => (\n          <button\n            key={lang}\n            className={`lang-tab ${selectedLanguage === lang ? \"active\" : \"\"}`}\n            onClick={() => setSelectedLanguage(lang)}\n          >\n            {lang}\n          </button>\n        ))}\n      </div>\n\n      {[\"Generate JWT\", \"Save Token\", \"Send Push Notification\"].map((step, index) => (\n        <React.Fragment key={step}>\n          <div className=\"flex fdc api-step\">\n            <h3>{index + 1}️⃣ {step}</h3>\n\n            <CodeBlock\n              ref={ (el)=>{\n                  if(!codeRefs.current[step]) codeRefs.current[step] = {};\n                  codeRefs.current[step][selectedLanguage] = el;\n              } }              \n              className=\"code-editor\"\n              step={step}\n              language={selectedLanguage}\n              code={updatedCode[step]?.[selectedLanguage] || codeExamples[step][selectedLanguage]}\n              onCodeChange={(newCode) =>\n                setUpdatedCode((prev) => ({ ...prev, [step]: { [selectedLanguage]: newCode } }))\n              }\n            />\n\n            {responses[step]?.[selectedLanguage] && (\n              <CodeBlock\n                mode=\"minimal\"\n                className=\"minimal\"\n                step={step}\n                language={selectedLanguage}                \n                code={responses[step][selectedLanguage] || \"no response\"}\n              />\n            )}\n\n            <button onClick={(event) => run(event, step)} className=\"api-btn\" disabled={loading[step]}>\n              {loading[step] ? (\n                <>\n                  <span className=\"spinner\"></span> {step.split(\" \")[0].replace(/e$/, \"\") + \"ing...\"}\n                </>\n              ) : step === \"Save Token\" ? runBtnText : \n                step === \"Send Push Notification\" ? (deviceId ? \"Paste Device Id\" : \"Send Push Notification\") \n                : step}\n            </button>\n          </div>\n\n          {step === \"Generate JWT\" && <RegisterDevice onToken={copyToken} />}\n        </React.Fragment>\n      ))}\n    </section>\n  );\n};\n\nexport default TestAPI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}