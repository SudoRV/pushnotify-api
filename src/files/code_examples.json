{
    "Generate JWT": {
        "Python": "import requests\nurl = \"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\"\ndata = {\n    \"type\": \"generate-jwt\",\n    \"access-token\": \"your-access-token\",\n    \"client-email\": \"your-service-account-client-email\",\n    \"private-key\": \"your-service-account-private-key\"\n}\nresponse = requests.post(url, json=data)\nprint(response.json())",
        
        "JavaScript": "fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    \"type\": \"generate-jwt\",\n    \"access-token\": \"your-access-token\",\n    \"client-email\": \"your-service-account-client-email\",\n    \"private-key\": \"your-service-account-private-key\"\n  })\n})\n.then(response => response.json())\n.then(data => console.log((typeof (data) === 'object') ? JSON.stringify(data, null, 2) : data));",
        
        "Node.js": "const fetch = require(\"node-fetch\");\nconst response = await fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    \"type\": \"generate-jwt\",\n    \"access-token\": \"your-access-token\",\n    \"client-email\": \"your-service-account-client-email\",\n    \"private-key\": \"your-service-account-private-key\"\n  })\n});\nconst data = await response.json();\nconsole.log((typeof (data) === 'object') ? JSON.stringify(data, null, 2) : data);",
        
        "C++": "#include <iostream>\n#include <cpr/cpr.h>\n\nint main() {\n    cpr::Response r = cpr::Post(\n        cpr::Url{\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\"},\n        cpr::Header{{\"Content-Type\", \"application/json\"}},\n        cpr::Body{R\"({\n            \"type\": \"generate-jwt\",\n            \"access-token\": \"your-access-token\",\n            \"client-email\": \"your-service-account-client-email\",\n            \"private-key\": \"your-service-account-private-key\"\n        })\"}\n    );\n\n    std::cout << r.text << std::endl;\n    return 0;\n}",
        
        "Java": "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.OutputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n        conn.setDoOutput(true);\n\n        // Corrected JSON body formatting\n        String jsonBody = \"{\"\n                + \"\"type\": \"generate-jwt\",\"\n                + \"\"access-token\": \"your-access-token\",\"\n                + \"\"client-email\": \"your-service-account-client-email\",\"\n                + \"\"private-key\": \"your-service-account-private-key\"\"\n                + \"}\";\n\n        OutputStream os = conn.getOutputStream();\n        os.write(jsonBody.getBytes());\n        os.flush();\n        os.close();\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String response;\n        while ((response = br.readLine()) != null) {\n            System.out.println(response);\n        }\n        br.close();\n    }\n}"
    },
    
    
    "Save Token": {
        "Python": "import requests\nurl = \"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\"\ndata = {\n    \"type\": \"save-token\",\n    \"access-token\": \"your-access-token\",\n    \"device-token\": \"your_fcm_token\"\n}\nresponse = requests.post(url, json=data)\nprint(response.json())",
        
        "JavaScript": "fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    \"type\": \"save-token\",\n    \"access-token\": \"your-access-token\",\n    \"device-token\": \"your_fcm_token\"\n  })\n})\n.then(response => response.json())\n.then(data => console.log((typeof (data) === 'object') ? JSON.stringify(data, null, 2) : data));",
        
        "Node.js": "const axios = require(\"axios\");\n\naxios.post(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n  type: \"save-token\",\n  \"access-token\": \"your-access-token\",\n  \"device-token\": \"your_fcm_token\"\n})\n.then(response => console.log((typeof (response.data) === 'object') ? JSON.stringify(response.data, null, 2) : response.data))\n.catch(error => console.error((typeof (error) === 'object') ? JSON.stringify(error, null, 2) : error));",
        
        "C++": "#include <iostream>\n#include <cpr/cpr.h>\n\nint main() {\n    cpr::Response r = cpr::Post(\n        cpr::Url{\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\"},\n        cpr::Header{{\"Content-Type\", \"application/json\"}},\n        cpr::Body{R\"({\n            \"type\": \"save-token\",\n            \"access-token\": \"your-access-token\",\n            \"device-token\": \"your_fcm_token\"\n        })\"}\n    );\n\n    std::cout << r.text << std::endl;\n    return 0;\n}",
        
        "Java": "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.OutputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n        conn.setDoOutput(true);\n\n        // Corrected JSON body (proper string formatting)\n        String jsonBody = \"{\"\n                + \"\"type\": \"save-token\",\"\n                + \"\"access-token\": \"your-access-token\",\"\n                + \"\"device-token\": \"your_fcm_token\"\"\n                + \"}\";\n\n        OutputStream os = conn.getOutputStream();\n        os.write(jsonBody.getBytes());\n        os.flush();\n        os.close();\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String response;\n        while ((response = br.readLine()) != null) {\n            System.out.println(response);\n        }\n        br.close();\n    }\n}"
    },
    
    "Send Push Notification": {
    "Python": "import requests\n\nurl = \"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\"\ndata = {\n    \"type\": \"push-fcm\", \n    \"access-token\": \"your-access-token\",\n    \"device-id\": \"your_device_id\",\n    \"title\": \"Hello!\",\n    \"body\": \"This is a test notification\",\n    \"payload\": { \"key\": \"value\" }\n}\n\nresponse = requests.post(url, json=data)\nprint(response.json())",
    
    "JavaScript": "fetch(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n  method: \"POST\",\n  headers: { \"Content-Type\": \"application/json\" },\n  body: JSON.stringify({\n    \"type\": \"push-fcm\",\n    \"access-token\": \"your-access-token\",\n    \"device-id\": \"your_device_id\",\n    \"title\": \"Hello!\",\n    \"body\": \"This is a test notification\",\n    \"payload\": { \"key\": \"value\" }\n  })\n})\n.then(response => response.json())\n.then(data => console.log(JSON.stringify(data, null, 2)))\n.catch(error => console.error(\"Error:\", error));",
    
    "Node.js": "const axios = require(\"axios\");\n\naxios.post(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\", {\n  type: \"push-fcm\",\n  \"access-token\": \"your-access-token\",\n  \"device-id\": \"your_device_id\",\n  title: \"Hello!\",\n  body: \"This is a test notification\",\n  payload: { key: \"value\" }\n})\n.then(response => console.log(JSON.stringify(response.data, null, 2)))\n.catch(error => console.error(\"Error:\", error));",
    
    "C++": "#include <iostream>\n#include <cpr/cpr.h>\n\nint main() {\n    cpr::Response r = cpr::Post(\n        cpr::Url{\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\"},\n        cpr::Header{{\"Content-Type\", \"application/json\"}},\n        cpr::Body{R\"({\n            \"type\": \"push-fcm\",\n            \"access-token\": \"your-access-token\",\n            \"device-id\": \"your_device_id\",\n            \"title\": \"Hello!\",\n            \"body\": \"This is a test notification\",\n            \"payload\": { \"key\": \"value\" }\n        })\"}\n    );\n\n    std::cout << r.text << std::endl;\n    return 0;\n}",
    
    "Java": "import java.net.HttpURLConnection;\nimport java.net.URL;\nimport java.io.OutputStream;\nimport java.io.InputStreamReader;\nimport java.io.BufferedReader;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        URL url = new URL(\"https://bsuf2bagnak4a7bcn2244z2ymi0ikygr.lambda-url.eu-north-1.on.aws/\");\n        HttpURLConnection conn = (HttpURLConnection) url.openConnection();\n        conn.setRequestMethod(\"POST\");\n        conn.setRequestProperty(\"Content-Type\", \"application/json\");\n        conn.setDoOutput(true);\n\n        String jsonBody = \"{\"\n                + \"\\\"type\\\": \\\"push-fcm\\\",\" \n  + \\\"access-token\\\": \\\"your-access-token\\\",\" \n                + \"\\\"device-id\\\": \\\"your_device_id\\\",\" \n                + \"\\\"title\\\": \\\"Hello!\\\",\" \n                + \"\\\"body\\\": \\\"This is a test notification\\\",\" \n                + \"\\\"payload\\\": { \\\"key\\\": \\\"value\\\" }\"\n                + \"}\";\n\n        OutputStream os = conn.getOutputStream();\n        os.write(jsonBody.getBytes());\n        os.flush();\n        os.close();\n\n        BufferedReader br = new BufferedReader(new InputStreamReader(conn.getInputStream()));\n        String response;\n        while ((response = br.readLine()) != null) {\n            System.out.println(response);\n        }\n        br.close();\n    }\n}"
  }
}






